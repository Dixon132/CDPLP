generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model actividades_institucionales {
  id_actividad                                   Int                                              @id @default(autoincrement())
  nombre                                         String?                                          @db.VarChar(150)
  descripcion                                    String?
  tipo                                           String?                                          @db.VarChar(50)
  fecha_programada                               DateTime?                                        @db.Date
  id_responsable                                 Int?
  archivo                                        String?
  costo                                          Decimal?                                         @db.Decimal(10, 2)
  estado                                         String?                                          @db.VarChar(50)
  usuarios                                       usuarios?                                        @relation(fields: [id_responsable], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
  asistencias_actividad                          asistencias_actividad[]
  colegiados_registrados_actividad_institucional colegiados_registrados_actividad_institucional[]
}

model asistencias_actividad {
  id_asistencia               Int                          @id @default(autoincrement())
  id_actividad                Int?
  id_colegiado                Int?
  actividades_institucionales actividades_institucionales? @relation(fields: [id_actividad], references: [id_actividad], onDelete: NoAction, onUpdate: NoAction)
  colegiados                  colegiados?                  @relation(fields: [id_colegiado], references: [id_colegiado], onDelete: NoAction, onUpdate: NoAction)
}

model colegiados_registrados_actividad_institucional {
  id_registro                 Int                          @id @default(autoincrement())
  id_actividad                Int?
  id_colegiado                Int?
  fecha_registro              DateTime?                    @db.Date
  estado_registro             String?                      @db.VarChar(50)
  metodo_pago                 String?                      @db.VarChar(50)
  id_invitado                 Int?
  origen_movimiento           origen_movimiento[]
  invitados                   invitados?                   @relation(fields: [id_invitado], references: [id_invitado], onDelete: NoAction, onUpdate: NoAction)
  actividades_institucionales actividades_institucionales? @relation(fields: [id_actividad], references: [id_actividad], onDelete: NoAction, onUpdate: NoAction)
  colegiados                  colegiados?                  @relation(fields: [id_colegiado], references: [id_colegiado], onDelete: NoAction, onUpdate: NoAction)
  createdAt                   DateTime?                    @default(now()) @db.Date
  updatedAt                   DateTime?                    @updatedAt @db.Date
}

model actividades_sociales {
  id_actividad_social         Int                           @id @default(autoincrement())
  nombre                      String?                       @db.VarChar(150)
  descripcion                 String?
  ubicacion                   String?                       @db.VarChar(200)
  motivo                      String?
  id_convenio                 Int?
  fecha_inicio                DateTime?                     @db.Date
  fecha_fin                   DateTime?                     @db.Date
  estado                      String?                       @db.VarChar(30)
  tipo                        String?                       @db.VarChar(50)
  convenio                    convenio?                     @relation(fields: [id_convenio], references: [id_convenio], onDelete: NoAction, onUpdate: NoAction)
  colegiados_asignados_social colegiados_asignados_social[]
}

model convenio {
  id_convenio          Int                    @id @default(autoincrement())
  nombre               String?                @db.VarChar(150)
  descripcion          String?
  fecha_inicio         DateTime?              @db.Date
  fecha_fin            DateTime?              @db.Date
  contacto             String?                @db.VarChar(100)
  estado               String?                @db.VarChar(30)
  actividades_sociales actividades_sociales[]
}

model correspondencia {
  id_correspondencia Int       @id @default(autoincrement())
  asunto             String?   @db.VarChar(200) //CARA
  contenido          String? //URL
  resumen            String? //PONER AHORA PERO IA FUTURO
  fecha_envio        DateTime? @db.Date
  fecha_recibido     DateTime? @db.Date //RECEPCIONAR ESTO
  estado             String?   @db.VarChar(50) //CAMBIAR ESTO DINAMICAMENTE
  remitente          String?   @db.VarChar(100)
  id_destinatario    Int?
  createdAt          DateTime? @default(now()) @db.Date
  updatedAt          DateTime? @updatedAt @db.Date
  destinatario       usuarios? @relation("destinatario", fields: [id_destinatario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
}

model colegiados {
  id_colegiado                                   Int                                              @id @default(autoincrement())
  carnet_identidad                               String?                                          @unique @db.VarChar(20)
  nombre                                         String?                                          @db.VarChar(100)
  apellido                                       String?                                          @db.VarChar(100)
  correo                                         String?                                          @db.VarChar(150)
  telefono                                       String?                                          @db.VarChar(20)
  especialidades                                 String?                                          @db.VarChar(200)
  fecha_inscripcion                              DateTime?                                        @db.Date
  fecha_renovacion                               DateTime?                                        @db.Date
  estado                                         String?                                          @db.VarChar(20)
  asistencias_actividad                          asistencias_actividad[]
  colegiados_asignados_social                    colegiados_asignados_social[]
  documentos_colegiados                          documentos_colegiados[]
  pagos_colegiados                               pagos_colegiados[]
  colegiados_registrados_actividad_institucional colegiados_registrados_actividad_institucional[]
}

model colegiados_asignados_social {
  id_asignacion        Int                   @id @default(autoincrement())
  id_actividad_social  Int?
  id_colegiado         Int?
  id_invitado          Int?
  invitados            invitados?            @relation(fields: [id_invitado], references: [id_invitado], onDelete: NoAction, onUpdate: NoAction)
  actividades_sociales actividades_sociales? @relation(fields: [id_actividad_social], references: [id_actividad_social], onDelete: NoAction, onUpdate: NoAction)
  colegiados           colegiados?           @relation(fields: [id_colegiado], references: [id_colegiado], onDelete: NoAction, onUpdate: NoAction)
}

model documentos_colegiados {
  id_documento      Int         @id @default(autoincrement())
  id_colegiado      Int?
  tipo_documento    String?
  archivo           String?
  fecha_entrega     DateTime?   @db.Date
  fecha_vencimiento DateTime?   @db.Date
  estado            String?     @db.VarChar(50)
  colegiados        colegiados? @relation(fields: [id_colegiado], references: [id_colegiado], onDelete: NoAction, onUpdate: NoAction)
}

model movimientos_financieros {
  id_movimiento    Int       @id @default(autoincrement())
  id_presupuesto   Int?
  fecha_movimiento DateTime? @db.Date
  tipo_movimiento  String?   @db.VarChar(20)
  categoria        String?   @db.VarChar(40)
  descripcion      String?
  monto            Decimal?  @db.Decimal(12, 2)
  id_origen        Int?

  origen_movimiento origen_movimiento? @relation(fields: [id_origen], references: [id_origen], onDelete: NoAction, onUpdate: NoAction)
  presupuestos      presupuestos?      @relation(fields: [id_presupuesto], references: [id_presupuesto], onDelete: NoAction, onUpdate: NoAction)
}

model origen_movimiento {
  id_origen                                      Int                                             @id @default(autoincrement())
  tipo_origen                                    String?                                         @db.VarChar(50)
  id_pago_colegiado                              Int?
  id_registro_actividad_institucional            Int?
  monto                                          Decimal?                                        @db.Decimal(12, 2)
  movimientos_financieros                        movimientos_financieros[]
  colegiados_registrados_actividad_institucional colegiados_registrados_actividad_institucional? @relation(fields: [id_registro_actividad_institucional], references: [id_registro], onDelete: NoAction, onUpdate: NoAction)
  pagos_colegiados                               pagos_colegiados?                               @relation(fields: [id_pago_colegiado], references: [id_pago], onDelete: NoAction, onUpdate: NoAction)
}

model pagos_colegiados {
  id_pago           Int                 @id @default(autoincrement())
  id_colegiado      Int?
  concepto          String?             @db.VarChar(100)
  fecha_pago        DateTime?           @db.Date
  monto             Decimal?            @db.Decimal(10, 2)
  estado_pago       String?             @default("REALIZADO") @db.VarChar(50)
  origen_movimiento origen_movimiento[]
  colegiados        colegiados?         @relation(fields: [id_colegiado], references: [id_colegiado], onDelete: NoAction, onUpdate: NoAction)
}

model presupuestos {
  id_presupuesto          Int                       @id @default(autoincrement())
  nombre_presupuesto      String?                   @db.VarChar(150)
  descripcion             String?
  monto_total             Decimal?                  @db.Decimal(12, 2)
  fecha_asignacion        DateTime?                 @db.Date
  saldo_restante          Decimal?                  @db.Decimal(12, 2)
  estado                  String?                   @db.VarChar(50)
  movimientos_financieros movimientos_financieros[]
}

model auditoria {
  id_auditoria Int      @id @default(autoincrement())
  id_usuario   Int
  accion       String // "CREÓ", "ELIMINÓ", "MODIFICÓ", "INICIÓ SESIÓN", etc.
  modulo       String // "Pagos", "Actividades", "Usuarios", "Perfil", etc. ✅ Más amigable que 'tabla'
  descripcion  String // "El usuario eliminó un pago de 100Bs para el colegiado Juan Pérez"
  fecha        DateTime @default(now())

  usuario usuarios @relation(fields: [id_usuario], references: [id_usuario])
}

model roles {
  id_rol       Int         @id @default(autoincrement())
  id_usuario   Int?
  fecha_inicio DateTime?   @db.Date
  fecha_fin    DateTime?   @db.Date
  activo       Boolean?    @default(true)
  rol          RolUsuario?
  usuarios     usuarios?   @relation(fields: [id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
}

model usuarios {
  id_usuario                  Int                           @id @default(autoincrement())
  nombre                      String?                       @db.VarChar(100)
  apellido                    String?                       @db.VarChar(100)
  correo                      String?                       @db.VarChar(150)
  contrase_a                  String?                       @map("contraseña") @db.VarChar(300)
  telefono                    String?                       @db.VarChar(20)
  direccion                   String?                       @db.VarChar(200)
  fecha_registro              DateTime?                     @default(now()) @db.Date
  estado                      String?                       @default("ACTIVO") @db.VarChar(20)
  fecha_actualizacion         DateTime?                     @updatedAt @db.Date
  actividades_institucionales actividades_institucionales[]
  roles                       roles[]
  destinatario                correspondencia[]             @relation("destinatario")
  auditoria                   auditoria[]
}

enum RolUsuario {
  SECRETARIO_GENERAL
  PRESIDENTE
  VICEPRESIDENTE
  VOCAL
  SECRETARIO
  TESORERO
  NO_DEFINIDO
}

model invitados {
  id_invitado                                    Int                                              @id @default(autoincrement())
  nombre                                         String
  apellido                                       String
  tipo                                           String? // estudiante, pasante, invitado externo
  correo                                         String?
  telefono                                       String?
  colegiados_asignados_social                    colegiados_asignados_social[]
  colegiados_registrados_actividad_institucional colegiados_registrados_actividad_institucional[]
}
