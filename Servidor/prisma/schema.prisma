generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model actividades_institucionales {
  id_actividad          Int                     @id @default(autoincrement())
  nombre                String?                 @db.VarChar(150)
  descripcion           String?
  tipo                  String?                 @db.VarChar(50)
  fecha_inicio          DateTime?               @db.Date
  fecha_fin             DateTime?               @db.Date
  id_responsable        Int?
  costo                 Decimal?                @db.Decimal(10, 2)
  estado                String?                 @db.VarChar(50)
  usuarios              usuarios?               @relation(fields: [id_responsable], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
  asistencias_actividad asistencias_actividad[]
  origen_movimiento     origen_movimiento[]
}

model actividades_sociales {
  id_actividad_social          Int                           @id @default(autoincrement())
  nombre                       String?                       @db.VarChar(150)
  descripcion                  String?
  ubicacion                    String?                       @db.VarChar(200)
  motivo                       String?
  origen_intervencion          String?                       @db.VarChar(20)
  fecha_inicio                 DateTime?                     @db.Date
  fecha_fin                    DateTime?                     @db.Date
  costo                        Decimal?                      @db.Decimal(10, 2)
  estado                       String?                       @db.VarChar(30)
  tipo                         String?                       @db.VarChar(50)
  id_solicitud                 Int?
  id_responsable               Int?
  usuarios                     usuarios?                     @relation(fields: [id_responsable], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
  solicitudes_actividad_social solicitudes_actividad_social? @relation(fields: [id_solicitud], references: [id_solicitud], onDelete: NoAction, onUpdate: NoAction)
  colegiados_asignados_social  colegiados_asignados_social[]
  origen_movimiento            origen_movimiento[]
}

model asistencias_actividad {
  id_asistencia               Int                          @id @default(autoincrement())
  id_actividad                Int?
  id_colegiado                Int?
  fecha_asistencia            DateTime?                    @db.Date
  actividades_institucionales actividades_institucionales? @relation(fields: [id_actividad], references: [id_actividad], onDelete: NoAction, onUpdate: NoAction)
  colegiados                  colegiados?                  @relation(fields: [id_colegiado], references: [id_colegiado], onDelete: NoAction, onUpdate: NoAction)
}

model colegiados {
  id_colegiado                Int                           @id @default(autoincrement())
  carnet_identidad            String?                       @unique @db.VarChar(20)
  nombre                      String?                       @db.VarChar(100)
  apellido                    String?                       @db.VarChar(100)
  correo                      String?                       @db.VarChar(150)
  telefono                    String?                       @db.VarChar(20)
  especialidades              String?                       @db.VarChar(200)
  fecha_inscripcion           DateTime?                     @db.Date
  fecha_renovacion            DateTime?                     @db.Date
  estado                      String?                       @db.VarChar(20)
  asistencias_actividad       asistencias_actividad[]
  colegiados_asignados_social colegiados_asignados_social[]
  documentos_colegiados       documentos_colegiados[]
  pagos_colegiados            pagos_colegiados[]
}

model colegiados_asignados_social {
  id_asignacion        Int                   @id @default(autoincrement())
  id_actividad_social  Int?
  id_colegiado         Int?
  actividades_sociales actividades_sociales? @relation(fields: [id_actividad_social], references: [id_actividad_social], onDelete: NoAction, onUpdate: NoAction)
  colegiados           colegiados?           @relation(fields: [id_colegiado], references: [id_colegiado], onDelete: NoAction, onUpdate: NoAction)
}

model documentos_colegiados {
  id_documento      Int         @id @default(autoincrement())
  id_colegiado      Int?
  tipo_documento    String?     @db.VarChar(100)
  archivo           String?
  fecha_entrega     DateTime?   @db.Date
  fecha_vencimiento DateTime?   @db.Date
  estado            String?     @db.VarChar(50)
  colegiados        colegiados? @relation(fields: [id_colegiado], references: [id_colegiado], onDelete: NoAction, onUpdate: NoAction)
}

model etapas_proyecto {
  id_etapa        Int               @id @default(autoincrement())
  id_proyecto     Int?
  nombre_etapa    String?           @db.VarChar(150)
  descripcion     String?
  fecha_inicio    DateTime?         @db.Date
  fecha_fin       DateTime?         @db.Date
  estado          String?           @db.VarChar(50)
  proyectos       proyectos?        @relation(fields: [id_proyecto], references: [id_proyecto], onDelete: NoAction, onUpdate: NoAction)
  tareas_proyecto tareas_proyecto[]
}

model movimientos_financieros {
  id_movimiento     Int                @id @default(autoincrement())
  id_presupuesto    Int?
  fecha_movimiento  DateTime?          @db.Date
  tipo_movimiento   String?            @db.VarChar(20)
  categoria         String?            @db.VarChar(40)
  descripcion       String?
  monto             Decimal?           @db.Decimal(12, 2)
  id_origen         Int?
  id_responsable    Int?
  origen_movimiento origen_movimiento? @relation(fields: [id_origen], references: [id_origen], onDelete: NoAction, onUpdate: NoAction)
  presupuestos      presupuestos?      @relation(fields: [id_presupuesto], references: [id_presupuesto], onDelete: NoAction, onUpdate: NoAction)
  usuarios          usuarios?          @relation(fields: [id_responsable], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
}

model origen_movimiento {
  id_origen                   Int                          @id @default(autoincrement())
  id_pago_colegiado           Int?
  id_actividad_social         Int?
  id_actividad_institucional  Int?
  id_recurso_proyecto         Int?
  movimientos_financieros     movimientos_financieros[]
  actividades_institucionales actividades_institucionales? @relation(fields: [id_actividad_institucional], references: [id_actividad], onDelete: NoAction, onUpdate: NoAction)
  actividades_sociales        actividades_sociales?        @relation(fields: [id_actividad_social], references: [id_actividad_social], onDelete: NoAction, onUpdate: NoAction)
  pagos_colegiados            pagos_colegiados?            @relation(fields: [id_pago_colegiado], references: [id_pago], onDelete: NoAction, onUpdate: NoAction)
  recursos_proyecto           recursos_proyecto?           @relation(fields: [id_recurso_proyecto], references: [id_recurso], onDelete: NoAction, onUpdate: NoAction)
}

model pagos_colegiados {
  id_pago           Int                 @id @default(autoincrement())
  id_colegiado      Int?
  concepto          String?             @db.VarChar(100)
  fecha_pago        DateTime?           @db.Date
  monto             Decimal?            @db.Decimal(10, 2)
  estado_pago       String?             @db.VarChar(50)
  origen_movimiento origen_movimiento[]
  colegiados        colegiados?         @relation(fields: [id_colegiado], references: [id_colegiado], onDelete: NoAction, onUpdate: NoAction)
}

model presupuestos {
  id_presupuesto          Int                       @id @default(autoincrement())
  nombre_presupuesto      String?                   @db.VarChar(150)
  descripcion             String?
  monto_total             Decimal?                  @db.Decimal(12, 2)
  fecha_asignacion        DateTime?                 @db.Date
  saldo_restante          Decimal?                  @db.Decimal(12, 2)
  estado                  String?                   @db.VarChar(50)
  movimientos_financieros movimientos_financieros[]
}

model proyectos {
  id_proyecto       Int                 @id @default(autoincrement())
  titulo            String?             @db.VarChar(200)
  descripcion       String?
  fecha_inicio      DateTime?           @db.Date
  fecha_fin         DateTime?           @db.Date
  id_responsable    Int?
  presupuesto       Decimal?            @db.Decimal(12, 2)
  estado            String?             @db.VarChar(50) @default("EN_PROCESO")
  etapas_proyecto   etapas_proyecto[]
  usuarios          usuarios?           @relation(fields: [id_responsable], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
  recursos_proyecto recursos_proyecto[]
}

model recursos_proyecto {
  id_recurso        Int                 @id @default(autoincrement())
  id_proyecto       Int?
  tipo_recurso      String?             @db.VarChar(50)
  descripcion       String?
  cantidad          Int?
  costo             Decimal?            @db.Decimal(12, 2)
  origen_movimiento origen_movimiento[]
  proyectos         proyectos?          @relation(fields: [id_proyecto], references: [id_proyecto], onDelete: NoAction, onUpdate: NoAction)
}

model reportes {
  id_reporte       Int       @id @default(autoincrement())
  tipo_reporte     String?   @db.VarChar(100)
  descripcion      String?
  archivo          String?
  fecha_generacion DateTime? @db.Date
  id_creador       Int?
  usuarios         usuarios? @relation(fields: [id_creador], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
}

enum RolUsuario {
  SECRETARIO_GENERAL
  PRESIDENTE
  VICEPRESIDENTE
  VOCAL
  SECRETARIO
}

model roles {
  id_rol       Int         @id @default(autoincrement())
  id_usuario   Int?
  rol          RolUsuario? @default(SECRETARIO_GENERAL)
  fecha_inicio DateTime?   @db.Date
  fecha_fin    DateTime?   @db.Date
  activo       Boolean?
  usuarios     usuarios?   @relation(fields: [id_usuario], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
}

model solicitudes_actividad_social {
  id_solicitud         Int                    @id @default(autoincrement())
  solicitante_nombre   String?                @db.VarChar(150)
  institucion_origen   String?                @db.VarChar(150)
  contacto             String?                @db.VarChar(100)
  descripcion          String?
  fecha_solicitud      DateTime?              @db.Date
  estado               String?                @db.VarChar(30)
  actividades_sociales actividades_sociales[]
}

model tareas_proyecto {
  id_tarea         Int              @id @default(autoincrement())
  id_etapa         Int?
  descripcion      String?
  fecha_asignacion DateTime?        @db.Date
  fecha_entrega    DateTime?        @db.Date
  id_responsable   Int?
  estado           String?          @db.VarChar(50)
  etapas_proyecto  etapas_proyecto? @relation(fields: [id_etapa], references: [id_etapa], onDelete: NoAction, onUpdate: NoAction)
  usuarios         usuarios?        @relation(fields: [id_responsable], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
}

model usuarios {
  id_usuario                  Int                           @id @default(autoincrement())
  nombre                      String?                       @db.VarChar(100)
  apellido                    String?                       @db.VarChar(100)
  correo                      String?                       @db.VarChar(150)
  contrase_a                  String?                       @map("contraseña") @db.VarChar(300)
  telefono                    String?                       @db.VarChar(20)
  direccion                   String?                       @db.VarChar(200)
  fecha_registro              DateTime?                     @db.Date @default(now())
  fecha_actualizacion         DateTime?                     @db.Date @updatedAt
  estado                      String?                       @db.VarChar(20) @default("ACTIVO")
  actividades_institucionales actividades_institucionales[]
  actividades_sociales        actividades_sociales[]
  movimientos_financieros     movimientos_financieros[]
  proyectos                   proyectos[]
  reportes                    reportes[]
  roles                       roles[]
  tareas_proyecto             tareas_proyecto[]
}
